#!/usr/bin/env bash

set -eu

DATA_DIR="${FZF_RAINDROP_DATA_DIR:-$HOME/.local/share/fzf-raindrop}"
DATA_FILE="$DATA_DIR/latest.csv"
DATA_FILE_TEMP="$DATA_DIR/latest-temp.csv"
FZF_BOOKMARKS_HISTORY="$DATA_DIR/fzf-picker-history"
MODIFIED=$(stat -c %y "$DATA_FILE" | cut -d'.' -f1)
# Allow users to define a custom OPENER, fallback to auto-detection if not defined
OPENER=${OPENER:-$(command -v xdg-open || command -v open)}

# Get list of backups
get_backups() {
	curl 'https://api.raindrop.io/rest/v1/backups' \
		-H "Authorization: Bearer $FZF_RAINDROP_TOKEN"
}

# Get latest backup id
get_latest_backup_id() {
	get_backups | jq -r '.items | max_by(.created) | ._id'
}

# Get latest backup creation date
get_latest_backup_date() {
	get_backups | jq -r '.items | max_by(.created) | .created'
}

# Download all bookmarks from Raindrop
download_bookmarks() {
	echo "Pulling latest bookmarks from Raindrop"

	echo "Looking for most recent backup..."
	# Look for the most recent backup
	BACKUP_ID=$(get_latest_backup_id)
	BACKUP_DATE=$(get_latest_backup_date)
	echo "Found most recent backup. backup_created: $BACKUP_DATE, backup_id: $BACKUP_ID"

	# Download backup file
	echo "Downloading most recent backup..."
	curl -L "https://api.raindrop.io/rest/v1/backup/$BACKUP_ID.csv" \
		-H "Authorization: Bearer $FZF_RAINDROP_TOKEN" \
		--compressed \
		-o "$DATA_FILE_TEMP"

	mv "$DATA_FILE_TEMP" "$DATA_FILE"
	echo "Saved to $DATA_FILE"
}

mkdir -p "$DATA_DIR"

# Pull latest bookmarks
set +u
IS_UPDATE=false
if [[ "$1" == "update" ]]; then
	IS_UPDATE=true
fi
set -u
if [[ ! -f "$DATA_FILE" ]]; then
	echo "No data file found at $DATA_FILE"
	download_bookmarks
fi
if [[ "$IS_UPDATE" == true ]]; then
	download_bookmarks
	exit 0
fi

# Create id column if it doesn't exist
if ! head -n 1 "$DATA_FILE" | grep --quiet "id_2,"; then
	echo "Adding id_2 column. Formatting tags column"
	duckdb -c "
COPY (
    SELECT
        ROW_NUMBER() OVER () AS id_2,
        * REPLACE(
            CASE
                WHEN tags IS NOT NULL
                AND tags != '' THEN concat('#', REPLACE(tags, ', ', ', #'))
                ELSE NULL
            END AS tags,
            regexp_replace(highlights, '\n', '', 'g') AS highlights,
            regexp_replace(excerpt, '\n', '', 'g') AS excerpt
        )
    FROM
        '$DATA_FILE'
) TO '$DATA_FILE' WITH (FORMAT CSV, HEADER)
"
fi

# Note: column alignment changes as input changes, since fzf attempts to fit the matched words on the screen.
duckdb -c "
COPY (
    SELECT
        printf('%05d', id_2) AS id_2,
        printf('%03d', date_sub('day', created, today())) || 'd' AS 'age(days)',
        rpad(COALESCE(tags, '') || ',', 75, ' ') AS tags,
        left(rpad(',' || url || ',', 80, ' '), 80) AS url,
        left(rpad(',' || title || ',', 100, ' '), 100) AS title,
        note,
        highlights,
        excerpt
    FROM
        '$DATA_FILE'
) TO '/dev/stdout' WITH (FORMAT CSV, HEADER)
	" |
	# xsv table --width=2 --condense=75 |
	fzf --multi --layout=reverse --header-lines=1 --header "Downloaded at: $MODIFIED" --history="$FZF_BOOKMARKS_HISTORY" |
	awk --field-separator=, '{print $1}' |
	xargs -I {} duckdb -c "COPY(SELECT url FROM '$DATA_FILE' WHERE id_2 = {}) TO '/dev/stdout'" |
	xargs -I {} "$OPENER" "{}"
